/**
 * transformation pconf
 * date: 24/9/2011
 * author: J. Adrián Romero Garcés
 * description: PCONF to RoboComp component transformation
 */

texttransformation pconf (in mdl:"http://robocompdsl/1.0") {
  
  var editor:Boolean = true; //modo pruebas/editor
  var gui_qt:Boolean = false; //interfaz qt
  var worker_thread:Boolean = false; //worker como hebra
  var name_port_config:String; 
  var fpath:String; //path donde se crea el componente
  var proxies_hash:Hashtable;
  var writing_etc:Boolean = false;

  mdl.ConfigFile::main () {
     var rcomponent:mdl.RComponent = self.name;
     if(editor == false){
   		fpath = java("Entorno","getEnv","EJEMPLOS_DSL", "/home/adri/eclipseworkspace/dsl/bin");
     }else{
      	fpath = getenv("OUTPUT_PATH");
     }
     //self.crearGenericMonitorH();
     self.createGenericMonitorCpp();
     writing_etc = true;
     self.crearEtcConfig();	
     //lo fusiono con generic_config y generic_config.debug. Hacer esto al pulsar el boton de generar. No se puede leer un
     //fichero mofscript hasta que no se haya terminado de ejecutar la plantilla de transformación.
  	/* var file_name:String = fpath + "/etc/generic_config";
     if(editor == false){
  		java("Entorno","fusionarFicherosEtc", file_name, "/home/adri/eclipseworkspace/dsl/bin");
  	 }else{
  	  	java("Entorno", "fusionarFicherosEtc" , file_name, getenv("JAVADSL"));
  	 }*/
  }
  
  mdl.ConfigFile::crearEtcConfig(){
  	//genero los parametros en un fichero temporal
  	file(fpath + "/etc/generic_config_params");
  	'#Component Parameters defined in PDSL and PCONF files\n\n'
  	var tabulacion:String = '';
	self.readConfigPConf(tabulacion);
  }
  mdl.ConfigFile::crearGenericMonitorH()
  {
    //monitor.h
    //file(fpath + "/" + self.name.toLower() + "/src/genericmonitor.h");
    file(fpath + "/src/genericmonitor.h");
'/*
 *    Copyright (C) 2010 by RoboLab - University of Extremadura
 *
 *    This file is part of RoboComp
 *
 *    RoboComp is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    RoboComp is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with RoboComp.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef GENERICMONITOR_H
#define GENERICMONITOR_H

#include <Ice/Ice.h>
#include <QtCore>
#include "genericworker.h"
#include "config.h"
#include <qlog/qlog.h>
#include <CommonBehavior.h>

/**
       \\brief
       @author authorname
*/
class GenericMonitor : public QThread
{
  Q_OBJECT
  
  public:
	GenericMonitor(GenericWorker *_worker, Ice::CommunicatorPtr _communicator);
	virtual ~GenericMonitor();
	
	
    //CommonBehavior
	int getPeriod();
	void setPeriod(int period);
	void killYourSelf();
	int timeAwake();
	RoboCompCommonBehavior::ParameterList getParameterList();
	void setParameterList(RoboCompCommonBehavior::ParameterList l);
	RoboCompCommonBehavior::State getState();
	
	virtual void readPConfParams(RoboCompCommonBehavior::ParameterList &params);
	virtual void readConfig(RoboCompCommonBehavior::ParameterList &params ) = 0;
	virtual void run() = 0;
	virtual void initialize() = 0;
	
  protected:
	int period;
	GenericWorker *worker;
	Ice::CommunicatorPtr communicator;
	QTime initialTime;
	RoboCompCommonBehavior::ParameterList config_params;
	RoboCompCommonBehavior::State state;
	
	virtual bool sendParamsToWorker(RoboCompCommonBehavior::ParameterList params) = 0;
	virtual bool checkParams(RoboCompCommonBehavior::ParameterList l) = 0;
	
	bool configGetString( const std::string name, std::string &value,  const std::string default_value, QStringList *list = NULL);
  signals:
	void kill();
};

#endif // GENERICMONITOR_H'
  }

  mdl.ConfigListParams::readConfigListParams(num:String, tabulacion:String){
  	var param_name:String;
	var num_params:Hashtable;
	var num_s:String;
	self.params->forEach(param:mdl.ConfigParams){
	  	param_name = param.refparams.name;
	  	if(writing_etc==false){
			tabulacion'configGetString( "'param_name'_'num'", aux.value, "'param.paramtype._getFeature("defaultvalue")'" );\n'
			//tabulacion'configGetString( "'param_name'_'num'", aux.value);\n'
			tabulacion'params["'param.refparams.name'_'num'"] = aux;\n'
	  	}else{
	  		tabulacion param_name'_'num' = 'param.paramtype._getFeature("defaultvalue")'\n'
	  	}
	}
	self.listparams->forEach(lp:mdl.ConfigListParams){
	    num_s = num + lp.num;
		lp.readConfigListParams(num_s, tabulacion);
	}		
  }

  mdl.ConfigFile::readConfigPConf(tabulacion:String){
  	var param_name:String;
	var num_params:Hashtable;
	self.params->forEach(param:mdl.ConfigParams){
	  	param_name = param.refparams.name;
		if(writing_etc==false){
			tabulacion'configGetString( "'param_name'", aux.value, "'param.paramtype._getFeature("defaultvalue")'" );\n'
			//tabulacion'configGetString( "'param_name'", aux.value);\n'
			tabulacion'params["'param.refparams.name'"] = aux;\n'
		}else{
			tabulacion param_name' = 'param.paramtype._getFeature("defaultvalue")'\n'
		}
	}	
	self.listparams->forEach(lparam:mdl.ConfigListParams){
		var num_s:String = lparam.num;
		lparam.readConfigListParams(num_s, tabulacion);
	}	
  }

  mdl.ConfigFile::createGenericMonitorCpp(){
	//monitor.cpp
	//file(fpath + "/" + self.name.toLower() + "/src/genericmonitor.cpp");
	file(fpath + "/src/genericmonitor.cpp");
'/*
 *    Copyright (C) 2010 by RoboLab - University of Extremadura
 *
 *    This file is part of RoboComp
 *
 *    RoboComp is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    RoboComp is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with RoboComp.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "genericmonitor.h"
/**
* \\brief Default constructor
*/
GenericMonitor::GenericMonitor(GenericWorker *_worker,Ice::CommunicatorPtr _communicator)
{
	worker = _worker;
	this->communicator = _communicator;
	period = 100;
	state = RoboCompCommonBehavior::Starting;
}
/**
* \\brief Default destructor
*/
GenericMonitor::~GenericMonitor()
{

}

/**
* \\brief Get component execution state
* @return State Component state
*/
RoboCompCommonBehavior::State GenericMonitor::getState()
{
	return state;
}

/**
* \\brief Get worker period
* @return int Worker period in ms
*/
int GenericMonitor::getPeriod()
{
	return period;
}
/**
* \\brief Change worker period
* @param per Period in ms
*/
void GenericMonitor::setPeriod(int _period)
{
	worker->setPeriod(_period);
	period =_period;
}
/**
* \\brief Kill component
*/
void GenericMonitor::killYourSelf()
{
	rDebug("Killing myself");
	this->exit();
	worker->killYourSelf();
	emit kill();
	
}
/**
* \\brief Get Component time awake
* @return int Time alive in seconds
*/
int GenericMonitor::timeAwake()
{
	return initialTime.secsTo(QTime::currentTime());
}
/**
* \\brief Return components parameters
* @return  AttrList Configuration parameters list
*/
RoboCompCommonBehavior::ParameterList GenericMonitor::getParameterList() 
{ 
	return config_params;
}
/**
* \\brief Change configurations parameters to worker
* @param l Configuration parameters list
*/
void GenericMonitor::setParameterList(RoboCompCommonBehavior::ParameterList l) 
{ 
	rInfo("Changing configuration params");
	sendParamsToWorker(l);
}

/**
* \\brief Read parameters from pconf file. This method will be empty if there is not any pconf file available.
* @param l Configuration parameters list
*/
void GenericMonitor::readPConfParams(RoboCompCommonBehavior::ParameterList &params)
{
	RoboCompCommonBehavior::Parameter aux;
'	
	var tabulacion:String = '\t';
	self.readConfigPConf(tabulacion);
'
}

//Ice Methods to read from file 
//name, parameter config value
//return value of parameter config 
//default value for the parameter
//return false if the parameter does not exist. Throw exception in other case.
//if you need one parameter mandatory you can pass empty string in default_value
bool GenericMonitor::configGetString( const std::string name, std::string&value,  const std::string default_value, QStringList *list)
{
	value = communicator->getProperties()->getProperty( name );

	if ( value.length() == 0)
	{
	   	if (default_value.length() != 0)
		{
			value = default_value;
			return false;
		}
		else if (default_value.length() == 0)
		{
			QString error = QString("empty configuration string, not default value for")+QString::fromStdString(name);
			qDebug() << error;
			throw error;
		}
	}

	if (list != NULL)
	{
		if (list->contains(QString::fromStdString(value)) == false)
		{
			qFatal("Reading config file: %s is not a valid string", name.c_str());
			rError("Reading config file:"+name+" is not a valid string");
		}
		QString error = QString("not valid configuration value");
		qDebug() << error;
		throw error;
	}

	std::cout << name << " " << value << std::endl;
	return true; 
}'

  }
  
  
}
